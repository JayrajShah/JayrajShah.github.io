{"version":3,"sources":["assets/pic.png","components/navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","navContainerWrapper","backgroundColor","height","position","width","zIndex","navContainer","display","justifyContent","alignItems","paddingTop","navListItem","fontFamily","fontSize","cursor","color","Navbar","classes","className","Container","map","item","ButtonBase","key","centerRipple","disableRipple","onClick","console","log","toUpperCase","themex","createMuiTheme","typography","join","theme","title","margin","breakpoints","down","name","letterSpacing","designation","App","Grid","style","src","pic","alt","Typography","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,iC,0PCGrCC,EAAYC,YAAW,CAC3BC,oBAAqB,CACnBC,gBAAiB,UACjBC,OAAQ,MACRC,SAAU,QACVC,MAAO,OACPC,OAAQ,KAEVC,aAAc,CACZC,QAAS,OACTC,eAAgB,eAChBC,WAAY,SACZC,WAAY,OAEdC,YAAa,CACXC,WAAY,SACZC,SAAU,QACVC,OAAQ,UACRC,MAAO,UACP,UAAW,CACTA,MAAO,cA8BEC,EAzBA,WACb,IAAMC,EAAUnB,IAGhB,OACE,yBAAKoB,UAAWD,EAAQjB,qBACtB,kBAACmB,EAAA,EAAD,CAAWD,UAAWD,EAAQX,cAJlB,CAAC,QAAS,UAAW,UAKtBc,KAAI,SAACC,GAAD,OACX,kBAACC,EAAA,EAAD,CACEC,IAAKF,EACLG,cAAc,EACdC,eAAe,EACfP,UAAWD,EAAQN,YACnBe,QAAS,WACPC,QAAQC,IAAIP,KAGbA,EAAKQ,qBCjCZC,EAASC,YAAe,CAC5BC,WAAY,CACVpB,WAAY,CACV,UACA,SACA,mBACA,QACA,cACAqB,KAAK,QAILnC,EAAYC,aAAW,SAACmC,GAAD,MAAY,CACvCC,MAAM,aACJC,OAAQ,OACPF,EAAMG,YAAYC,KAAK,MAAQ,CAC9B5B,WAAY,QAGhB6B,KAAK,aACH3B,WAAY,QACZG,MAAO,UACPyB,cAAe,QACf3B,SAAU,OACTqB,EAAMG,YAAYC,KAAK,MAAQ,CAC9BzB,SAAS,SAGb4B,YAAY,aACV7B,WAAY,QACZG,MAAO,UACPyB,cAAe,SACf3B,SAAU,OAETqB,EAAMG,YAAYC,KAAK,MAAQ,CAC9BzB,SAAU,YA4BD6B,MAvBf,WACE,IAAMzB,EAAUnB,IAChB,OACE,kBAAC,IAAD,CAAkBoC,MAAOJ,GACvB,kBAAC,EAAD,MACA,kBAACa,EAAA,EAAD,CACEC,MAAO,CAAE3C,gBAAiB,WAC1BiB,UAAU,qBAEV,kBAACyB,EAAA,EAAD,CAAMtB,MAAI,EAACH,UAAU,iBACnB,yBAAK2B,IAAKC,IAAK5B,UAAU,UAAU6B,IAAI,UAEzC,kBAACJ,EAAA,EAAD,CAAMtB,MAAI,EAACH,UAAWD,EAAQkB,OAC5B,kBAACa,EAAA,EAAD,CAAY9B,UAAWD,EAAQsB,MAA/B,eACA,kBAACS,EAAA,EAAD,CAAY9B,UAAWD,EAAQwB,aAA/B,4BCtDUQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.68cc83b2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pic.19481eba.png\";","import React from \"react\";\r\nimport { makeStyles, Container, ButtonBase } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n  navContainerWrapper: {\r\n    backgroundColor: \"#242424\",\r\n    height: \"8vh\",\r\n    position: \"fixed\",\r\n    width: \"100%\",\r\n    zIndex: \"2\",\r\n  },\r\n  navContainer: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-around\",\r\n    alignItems: \"center\",\r\n    paddingTop: \"1em\",\r\n  },\r\n  navListItem: {\r\n    fontFamily: \"Oswald\",\r\n    fontSize: \"3.5vh\",\r\n    cursor: \"pointer\",\r\n    color: \"#efefef\",\r\n    \"&:hover\": {\r\n      color: \"#FBD630\",\r\n    },\r\n  },\r\n});\r\n\r\nconst Navbar = () => {\r\n  const classes = useStyles();\r\n  const navList = [\"About\", \"Contact\", \"Resume\"];\r\n\r\n  return (\r\n    <div className={classes.navContainerWrapper}>\r\n      <Container className={classes.navContainer}>\r\n        {navList.map((item) => (\r\n          <ButtonBase\r\n            key={item}\r\n            centerRipple={false}\r\n            disableRipple={true}\r\n            className={classes.navListItem}\r\n            onClick={() => {\r\n              console.log(item);\r\n            }}\r\n          >\r\n            {item.toUpperCase()}\r\n          </ButtonBase>\r\n        ))}\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport pic from \"./assets/pic.png\";\nimport {\n  Typography,\n  MuiThemeProvider,\n  createMuiTheme,\n  Grid,\n  makeStyles,\n} from \"@material-ui/core\";\nimport Navbar from \"./components/navbar\";\n\nconst themex = createMuiTheme({\n  typography: {\n    fontFamily: [\n      \"Raleway\",\n      \"Roboto\",\n      '\"Helvetica Neue\"',\n      \"Arial\",\n      \"sans-serif\",\n    ].join(\",\"),\n  },\n});\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    margin: \"10%\",\n    [theme.breakpoints.down(\"md\")]: {\n      paddingTop: \"8vh\",\n    },\n  },\n  name: {\n    fontFamily: \"Anton\",\n    color: \"#FBD630\",\n    letterSpacing: \"0.1em\",\n    fontSize: \"8vw\",\n    [theme.breakpoints.down(\"md\")]: {\n      fontSize: `18vw`,\n    },\n  },\n  designation: {\n    fontFamily: \"Anton\",\n    color: \"#efefef\",\n    letterSpacing: \"0.32em\",\n    fontSize: \"3vw\",\n\n    [theme.breakpoints.down(\"md\")]: {\n      fontSize: \"6vw\",\n    },\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  return (\n    <MuiThemeProvider theme={themex}>\n      <Navbar />\n      <Grid\n        style={{ backgroundColor: \"#242424\" }}\n        className=\"landing-container\"\n      >\n        <Grid item className=\"jay-container\">\n          <img src={pic} className=\"jay-pic\" alt=\"logo\" />\n        </Grid>\n        <Grid item className={classes.title}>\n          <Typography className={classes.name}>JAYRAJ SHAH</Typography>\n          <Typography className={classes.designation}>\n            DEVELOPER & DESIGNER\n          </Typography>\n        </Grid>\n      </Grid>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}